['整体架构使用说明', '本程序采用了thinkphp框架', '该框架为我们的开发提供了很多很多的便利', '依托该框架的MVC设计模式', '利用其模块划分的特性', '我们为数据库的每一张表格都给定一个对应的Model类', '在其中设置好除了基础CRUD之外的复杂数据库操作', '基本的CRUD已经由thinkphp底层实现', '然后再将这些Model类再进行一次分类', '比如商家', '用户', '后台等', '然后再根据这样的分类下面分别实现数据调度', 'Action类', '也可以成为Controller类', 'Action类负责处理用户数据输入数据和数据库中读取的数据', '然后再按照情况完成页面调度', '基本上', 'Action类中的函数和页面调度相关的函数都会有一张与之想对应的页面模板', 'View层', '这些模板被调度之后', '会读取Action类函数所存放好的数据', '由于框架各层之间的对应都是以模块名称', '文件名称和函数名称对应的方式', '所以各层次都有非常相似的目录结构', '登录', '注册验证码生成', '采用thinkphp自带的验证码生成工具', 'Util', 'Image', '的buildImageVerify函数可以生成一张验证码图片', '同时可以将验证码存入session', '用户根据图片输入验证码提交表单之后', '系统将用户输入的验证码和session中的验证码进行比对即可', '商户按照距离由进及远排序展示', '客户端获取经纬度', '然后将所在城市和这个经纬度作为关键字传送给服务器', '服务器根据所在城市搜索出该城市的所有商户', '然后进行排序', '接着推送', '存在问题', '如果服务器的并发量很高', '服务器负载会很大', '导致响应时间长', '甚至程序崩溃', '解决方法构想', '利用分布式的想法', '将某一个城市或者某几个城市的距离排序计算集中到一台服务器', '构建成服务器组', '每台服务器用Redis将对应城市的所有商户的位置信息保存作为缓存', '当需要排序算法的时候', '读取这些缓存进行计算排序', '然后向用户每10条每10条地推送', '用户下拉刷新的时候推送', '当10条推送完的时候', '就把这10条商户信息从商户链表中删去']
